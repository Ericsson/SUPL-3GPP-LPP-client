/*
 * Generated by asn1c-0.9.29 (http://lionet.info/asn1c)
 * From ASN.1 module "LPP-PDU-Definitions"
 * 	found in "/home/martin/repos/LPP-Client/asn/LPP.asn"
 * 	`asn1c -fcompound-names -no-gen-OER -pdu=all -no-gen-example -S /home/martin/repos/LPP-Client/ASN1C/skeletons`
 */

#ifndef	_MeasurementReferenceTime_H_
#define	_MeasurementReferenceTime_H_


#include <asn_application.h>

/* Including external dependencies */
#include <NativeInteger.h>
#include "GNSS-ID.h"
#include <BIT_STRING.h>
#include <constr_SEQUENCE.h>
#include <constr_CHOICE.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum MeasurementReferenceTime__networkTime_PR {
	MeasurementReferenceTime__networkTime_PR_NOTHING,	/* No components present */
	MeasurementReferenceTime__networkTime_PR_eUTRA,
	MeasurementReferenceTime__networkTime_PR_uTRA,
	MeasurementReferenceTime__networkTime_PR_gSM,
	/* Extensions may appear below */
	MeasurementReferenceTime__networkTime_PR_nbIoT_r14,
	MeasurementReferenceTime__networkTime_PR_nr_r15
} MeasurementReferenceTime__networkTime_PR;
typedef enum MeasurementReferenceTime__networkTime__uTRA__mode_PR {
	MeasurementReferenceTime__networkTime__uTRA__mode_PR_NOTHING,	/* No components present */
	MeasurementReferenceTime__networkTime__uTRA__mode_PR_fdd,
	MeasurementReferenceTime__networkTime__uTRA__mode_PR_tdd
} MeasurementReferenceTime__networkTime__uTRA__mode_PR;

/* Forward declarations */
struct CellGlobalIdEUTRA_AndUTRA;
struct CellGlobalIdGERAN;
struct ECGI;
struct NCGI_r15;

/* MeasurementReferenceTime */
typedef struct MeasurementReferenceTime {
	long	 gnss_TOD_msec;
	long	*gnss_TOD_frac	/* OPTIONAL */;
	long	*gnss_TOD_unc	/* OPTIONAL */;
	GNSS_ID_t	 gnss_TimeID;
	struct MeasurementReferenceTime__networkTime {
		MeasurementReferenceTime__networkTime_PR present;
		union MeasurementReferenceTime__networkTime_u {
			struct MeasurementReferenceTime__networkTime__eUTRA {
				long	 physCellId;
				struct CellGlobalIdEUTRA_AndUTRA	*cellGlobalId	/* OPTIONAL */;
				BIT_STRING_t	 systemFrameNumber;
				/*
				 * This type is extensible,
				 * possible extensions are below.
				 */
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} eUTRA;
			struct MeasurementReferenceTime__networkTime__uTRA {
				struct MeasurementReferenceTime__networkTime__uTRA__mode {
					MeasurementReferenceTime__networkTime__uTRA__mode_PR present;
					union MeasurementReferenceTime__networkTime__uTRA__mode_u {
						struct MeasurementReferenceTime__networkTime__uTRA__mode__fdd {
							long	 primary_CPICH_Info;
							/*
							 * This type is extensible,
							 * possible extensions are below.
							 */
							
							/* Context for parsing across buffer boundaries */
							asn_struct_ctx_t _asn_ctx;
						} fdd;
						struct MeasurementReferenceTime__networkTime__uTRA__mode__tdd {
							long	 cellParameters;
							/*
							 * This type is extensible,
							 * possible extensions are below.
							 */
							
							/* Context for parsing across buffer boundaries */
							asn_struct_ctx_t _asn_ctx;
						} tdd;
					} choice;
					
					/* Context for parsing across buffer boundaries */
					asn_struct_ctx_t _asn_ctx;
				} mode;
				struct CellGlobalIdEUTRA_AndUTRA	*cellGlobalId	/* OPTIONAL */;
				long	 referenceSystemFrameNumber;
				/*
				 * This type is extensible,
				 * possible extensions are below.
				 */
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} uTRA;
			struct MeasurementReferenceTime__networkTime__gSM {
				long	 bcchCarrier;
				long	 bsic;
				struct CellGlobalIdGERAN	*cellGlobalId	/* OPTIONAL */;
				struct MeasurementReferenceTime__networkTime__gSM__referenceFrame {
					long	 referenceFN;
					long	*referenceFNMSB	/* OPTIONAL */;
					/*
					 * This type is extensible,
					 * possible extensions are below.
					 */
					
					/* Context for parsing across buffer boundaries */
					asn_struct_ctx_t _asn_ctx;
				} referenceFrame;
				long	*deltaGNSS_TOD	/* OPTIONAL */;
				/*
				 * This type is extensible,
				 * possible extensions are below.
				 */
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} gSM;
			/*
			 * This type is extensible,
			 * possible extensions are below.
			 */
			struct MeasurementReferenceTime__networkTime__nbIoT_r14 {
				long	 nbPhysCellId_r14;
				struct ECGI	*nbCellGlobalId_r14	/* OPTIONAL */;
				BIT_STRING_t	 sfn_r14;
				BIT_STRING_t	*hyperSFN_r14	/* OPTIONAL */;
				/*
				 * This type is extensible,
				 * possible extensions are below.
				 */
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} nbIoT_r14;
			struct MeasurementReferenceTime__networkTime__nr_r15 {
				long	 nrPhysCellId_r15;
				struct NCGI_r15	*nrCellGlobalID_r15	/* OPTIONAL */;
				BIT_STRING_t	 nr_sfn_r15;
				/*
				 * This type is extensible,
				 * possible extensions are below.
				 */
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} nr_r15;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *networkTime;
	/*
	 * This type is extensible,
	 * possible extensions are below.
	 */
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} MeasurementReferenceTime_t;

/* Implementation */
extern asn_TYPE_descriptor_t asn_DEF_MeasurementReferenceTime;
extern asn_SEQUENCE_specifics_t asn_SPC_MeasurementReferenceTime_specs_1;
extern asn_TYPE_member_t asn_MBR_MeasurementReferenceTime_1[5];

#ifdef __cplusplus
}
#endif

/* Referred external types */
#include "CellGlobalIdEUTRA-AndUTRA.h"
#include "CellGlobalIdGERAN.h"
#include "ECGI.h"
#include "NCGI-r15.h"

#endif	/* _MeasurementReferenceTime_H_ */
#include <asn_internal.h>
