/*
 * Generated by asn1c-0.9.29 (http://lionet.info/asn1c)
 * From ASN.1 module "LPP-PDU-Definitions"
 * 	found in "/home/martin/repos/LPP-Client/asn/LPP.asn"
 * 	`asn1c -fcompound-names -no-gen-OER -pdu=all -no-gen-example -S /home/martin/repos/LPP-Client/ASN1C/skeletons`
 */

#ifndef	_NavModelNAV_KeplerianSet_H_
#define	_NavModelNAV_KeplerianSet_H_


#include <asn_application.h>

/* Including external dependencies */
#include <NativeInteger.h>
#include <constr_SEQUENCE.h>

#ifdef __cplusplus
extern "C" {
#endif

/* NavModelNAV-KeplerianSet */
typedef struct NavModelNAV_KeplerianSet {
	long	 navURA;
	long	 navFitFlag;
	long	 navToe;
	long	 navOmega;
	long	 navDeltaN;
	long	 navM0;
	long	 navOmegaADot;
	unsigned long	 navE;
	long	 navIDot;
	unsigned long	 navAPowerHalf;
	long	 navI0;
	long	 navOmegaA0;
	long	 navCrs;
	long	 navCis;
	long	 navCus;
	long	 navCrc;
	long	 navCic;
	long	 navCuc;
	struct NavModelNAV_KeplerianSet__addNAVparam {
		long	 ephemCodeOnL2;
		long	 ephemL2Pflag;
		struct NavModelNAV_KeplerianSet__addNAVparam__ephemSF1Rsvd {
			long	 reserved1;
			long	 reserved2;
			long	 reserved3;
			long	 reserved4;
			
			/* Context for parsing across buffer boundaries */
			asn_struct_ctx_t _asn_ctx;
		} ephemSF1Rsvd;
		long	 ephemAODA;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *addNAVparam;
	/*
	 * This type is extensible,
	 * possible extensions are below.
	 */
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} NavModelNAV_KeplerianSet_t;

/* Implementation */
/* extern asn_TYPE_descriptor_t asn_DEF_navE_9;	// (Use -fall-defs-global to expose) */
/* extern asn_TYPE_descriptor_t asn_DEF_navAPowerHalf_11;	// (Use -fall-defs-global to expose) */
extern asn_TYPE_descriptor_t asn_DEF_NavModelNAV_KeplerianSet;
extern asn_SEQUENCE_specifics_t asn_SPC_NavModelNAV_KeplerianSet_specs_1;
extern asn_TYPE_member_t asn_MBR_NavModelNAV_KeplerianSet_1[19];

#ifdef __cplusplus
}
#endif

#endif	/* _NavModelNAV_KeplerianSet_H_ */
#include <asn_internal.h>
